
import numpy as np

def nectar_availability(position):
    x, y = position
    term1 = 20 * np.exp(-((x - 3) ** 2 + (y - 3) ** 2) / 4)
    term2 = 15 * np.exp(-((x - 7) ** 2 + (y - 7) ** 2) / 3)
    term3 = 10 * np.exp(-((x - 5) ** 2 + (y - 8) ** 2) / 2)
    return term1 + term2 + term3

def gwo_beehive(n_wolves=30, iterations=150, lower_bound=0, upper_bound=10):
    dim = 2  # 2D position
    
    wolves = np.random.uniform(lower_bound, upper_bound, (n_wolves, dim))
    
    alpha_pos = np.zeros(dim)
    alpha_score = -np.inf
    beta_pos = np.zeros(dim)
    beta_score = -np.inf
    delta_pos = np.zeros(dim)
    delta_score = -np.inf
    
    for t in range(iterations):
        for i in range(n_wolves):
            fitness = nectar_availability(wolves[i])
            
            if fitness > alpha_score:
                alpha_score = fitness
                alpha_pos = wolves[i].copy()
            elif fitness > beta_score:
                beta_score = fitness
                beta_pos = wolves[i].copy()
            elif fitness > delta_score:
                delta_score = fitness
                delta_pos = wolves[i].copy()
        
        a = 2 - t * (2 / iterations)
        
        for i in range(n_wolves):
            for j in range(dim):
                r1 = np.random.rand()
                r2 = np.random.rand()
                A1 = 2 * a * r1 - a
                C1 = 2 * r2
                D_alpha = abs(C1 * alpha_pos[j] - wolves[i][j])
                X1 = alpha_pos[j] - A1 * D_alpha
                
                r1 = np.random.rand()
                r2 = np.random.rand()
                A2 = 2 * a * r1 - a
                C2 = 2 * r2
                D_beta = abs(C2 * beta_pos[j] - wolves[i][j])
                X2 = beta_pos[j] - A2 * D_beta
                
                r1 = np.random.rand()
                r2 = np.random.rand()
                A3 = 2 * a * r1 - a
                C3 = 2 * r2
                D_delta = abs(C3 * delta_pos[j] - wolves[i][j])
                X3 = delta_pos[j] - A3 * D_delta
                
                wolves[i][j] = (X1 + X2 + X3) / 3
            
            wolves[i] = np.clip(wolves[i], lower_bound, upper_bound)
    
    return alpha_pos, alpha_score

if __name__ == "__main__":
    best_hive_location, max_nectar = gwo_beehive()
    print(f"Optimal beehive location: x={best_hive_location[0]:.4f}, y={best_hive_location[1]:.4f}")
    print(f"Maximum nectar availability: {max_nectar:.6f}")
